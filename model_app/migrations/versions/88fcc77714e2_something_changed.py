"""something changed

Revision ID: 88fcc77714e2
Revises: 4e03b8201a3e
Create Date: 2025-06-18 02:34:28.250653

"""

from alembic import op
import sqlalchemy as sa
import sqlmodel
import pgvector.sqlalchemy
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "88fcc77714e2"
down_revision = "4e03b8201a3e"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "vector_documents",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("initial_document_id", sa.Integer(), nullable=False),
        sa.Column("vector_store_id", sqlmodel.AutoString(), nullable=False),
        sa.Column("chunk_index", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["initial_document_id"],
            ["documents.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_vector_documents_vector_store_id"),
        "vector_documents",
        ["vector_store_id"],
        unique=False,
    )
    op.drop_index(
        op.f("ix_cmetadata_gin"),
        table_name="langchain_pg_embedding",
        postgresql_using="gin",
    )
    op.drop_table("langchain_pg_embedding")
    op.drop_table("langchain_pg_collection")
    op.drop_index(op.f("idx_documents_scope"), table_name="documents")
    op.drop_index(op.f("idx_documents_user"), table_name="documents")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f("idx_documents_user"), "documents", ["user_id"], unique=False)
    op.create_index(
        op.f("idx_documents_scope"), "documents", ["scope_id"], unique=False
    )
    op.create_table(
        "langchain_pg_collection",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "cmetadata",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("uuid", name="langchain_pg_collection_pkey"),
        sa.UniqueConstraint(
            "name",
            name="langchain_pg_collection_name_key",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "langchain_pg_embedding",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("collection_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "embedding",
            pgvector.sqlalchemy.vector.VECTOR(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("document", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "cmetadata",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["collection_id"],
            ["langchain_pg_collection.uuid"],
            name=op.f("langchain_pg_embedding_collection_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("langchain_pg_embedding_pkey")),
    )
    op.create_index(
        op.f("ix_cmetadata_gin"),
        "langchain_pg_embedding",
        ["cmetadata"],
        unique=False,
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_vector_documents_vector_store_id"), table_name="vector_documents"
    )
    op.drop_table("vector_documents")
    # ### end Alembic commands ###
