services:
  db:
    image: pgvector/pgvector:pg16
    ports:
      - "5432:5432"
    networks:
      - app_network
    environment:
      POSTGRES_USER: ${DB_USER:-pgvector}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-pgvector_rag}
    volumes:
      - data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-pgvector} -d ${DB_NAME:-pgvector_rag}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq-server:
    image: rabbitmq:3.12.14-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app_network
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 10s
      timeout: 5s
      retries: 5

  tokenizer_model:
    image: ghcr.io/ggml-org/llama.cpp:server
    # Only expose to host if needed for development/debugging
    # ports:
    #   - "8000:8000"
    networks:
      - app_network
    volumes:
      - ./models/tokenizer_model:/models:ro
    command: >
      -m /models/nomic-embed-text-v1.5.Q5_K_M.gguf
      --host 0.0.0.0
      --port 8000
      --embedding
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://0.0.0.0:8000/v1/models || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  chat_model:
    image: ghcr.io/ggml-org/llama.cpp:server
    # Only expose to host if needed for development/debugging
    # ports:
    #   - "8001:8000" # Expose container's 8000 on host 8001
    networks:
      - app_network
    volumes:
      - ./models/chat_model:/models:ro
    depends_on:
      tokenizer_model:
        condition: service_healthy
    command: >
      -m /models/gemma-3-12b-it-Q4_K_M.gguf
      --host 0.0.0.0
      --port 8000
      --n-gpu-layers 25
      --ctx-size 16384
      --rope-scale 0.25
      --yarn-orig-ctx 16384
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://0.0.0.0:8000/v1/models || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "8080:8080"
    networks:
      - app_network
    environment:
      DB_HOST: db
      DB_NAME: ${DB_NAME:-pgvector_rag}
      DB_USER: ${DB_USER:-pgvector}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      LLM_URL: http://chat_model:8000/v1/chat/completions
      EMBEDDING_MODEL_URL: http://tokenizer_model:8000/v1
      CHAT_MODEL_URL: http://chat_model:8000/v1
      DOCKER_ENV: "true"
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND: rpc://
    depends_on:
      db:
        condition: service_healthy
      rabbitmq-server:
        condition: service_healthy
      chat_model:
        condition: service_healthy
      tokenizer_model:
        condition: service_healthy
    volumes:
      - ./app:/app

  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.model
    command: celery -A celery_app worker -l info
    networks:
      - app_network
    environment:
      DB_HOST: db
      DB_NAME: ${DB_NAME:-pgvector_rag}
      DB_USER: ${DB_USER:-pgvector}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      LLM_URL: http://chat_model:8000/v1/chat/completions
      EMBEDDING_MODEL_URL: http://tokenizer_model:8000/v1
      CHAT_MODEL_URL: http://chat_model:8000/v1
      DOCKER_ENV: "true"
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND: rpc://
    depends_on:
      db:
        condition: service_healthy
      rabbitmq-server:
        condition: service_healthy
      chat_model:
        condition: service_healthy
      tokenizer_model:
        condition: service_healthy
    volumes:
      - ./app:/app

volumes:
  data:

networks:
  app_network:
    driver: bridge
